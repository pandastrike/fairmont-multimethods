"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _src = _interopRequireDefault(require("../src"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var create, define, eq, gte, isEqual, isFunction, isKind, isNumber, isString, isType, lookup, lte;
({
  isType,
  isKind,
  isFunction,
  isString,
  isNumber,
  isEqual,
  eq,
  gte,
  lte
} = require("panda-parchment"));
({
  create,
  define,
  lookup
} = _src.default);

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Generics", [(0, _amen.test)("Fibonacci function", function () {
    var fib;
    fib = create({
      name: "fib",
      description: "Fibonacci sequence"
    });
    define(fib, gte(1), function (n) {
      return fib(n - 1) + fib(n - 2);
    });
    define(fib, eq(1), function () {
      return 1;
    });
    define(fib, eq(2), function () {
      return 1;
    });
    return [(0, _amen.test)("matches simple predicates", function () {
      return (0, _assert.default)(fib(5) === 5);
    }), (0, _amen.test)("throws with name/arguments on type error", function () {
      console.warn("throws test only works on node 10+");
      return _assert.default.throws(function () {
        return fib(0);
      }, {
        message: "fib: Invalid arguments.",
        arguments: [0]
      });
    })];
  }()), (0, _amen.test)("Polymorphic dispatch", function () {
    var A, B, a, b, foo;
    A = class A {};
    B = class B extends A {};
    a = new A();
    b = new B();
    foo = create();
    define(foo, isKind(A), function () {
      return "foo: A";
    });
    define(foo, isType(B), function () {
      return "foo: B";
    });
    define(foo, isKind(A), isKind(B), function () {
      return "foo: A + B";
    });
    define(foo, isKind(B), isKind(A), function () {
      return "foo: B + A";
    });
    define(foo, eq(a), eq(b), function () {
      return "foo: a + b";
    });
    (0, _assert.default)(foo(b) === "foo: B");
    (0, _assert.default)(foo(a, b) === "foo: a + b");
    (0, _assert.default)(foo(b, a) === "foo: B + A");
    return _assert.default.throws(function () {
      return foo(b, a, b);
    });
  }), (0, _amen.test)("Variadic arguments", function () {
    var bar;
    bar = create();
    define(bar, String, function () {
      return true;
    }, function (x, ...a) {
      return a[0];
    });
    define(bar, Number, function () {
      return true;
    }, function (x, ...a) {
      return x;
    });
    return (0, _assert.default)(bar("foo", 1, 2, 3) === 1);
  }), (0, _amen.test)("Predicate functions", function () {
    var baz;
    baz = create();
    define(baz, function (x) {
      return x !== 7;
    }, function () {
      return false;
    });
    define(baz, function (x) {
      return x === 7;
    }, function (x) {
      return true;
    });
    (0, _assert.default)(baz(7));
    return (0, _assert.default)(!baz(6));
  }), (0, _amen.test)("Generics are functions", function () {
    return (0, _assert.default)(isFunction(create()));
  }), (0, _amen.test)("Lookups", function () {
    var f, foo;
    foo = create();
    define(foo, isNumber, function (x) {
      return x + x;
    });
    define(foo, isString, function (x) {
      return false;
    });
    f = lookup(foo, [7]);
    return (0, _assert.default)(f(7) === 14);
  })])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtZ2VuZXJpY3MvdGVzdC9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFLQTs7OztBQU5BLElBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLE1BQUEsRUFBQSxHQUFBO0FBR0EsQ0FBQTtBQUFBLEVBQUEsTUFBQTtBQUFBLEVBQUEsTUFBQTtBQUFBLEVBQUEsVUFBQTtBQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsUUFBQTtBQUFBLEVBQUEsT0FBQTtBQUFBLEVBQUEsRUFBQTtBQUFBLEVBQUEsR0FBQTtBQUFBLEVBQUE7QUFBQSxJQUMyQixPQUFBLENBRDNCLGlCQUMyQixDQUQzQjtBQUlBLENBQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBLE1BQUE7QUFBQSxFQUFBO0FBQUEsSUFBQSxZQUFBOztBQUVHLENBQUEsa0JBQUE7QUFFRCxvQkFBTSxNQUFNLGdCQUFBLFVBQUEsRUFBaUIsQ0FFM0IsZ0JBQUEsb0JBQUEsRUFBOEIsWUFBQTtBQUU1QixRQUFBLEdBQUE7QUFBQSxJQUFBLEdBQUEsR0FBTSxNQUFBLENBQ0o7QUFBQSxNQUFBLElBQUEsRUFBQSxLQUFBO0FBQ0EsTUFBQSxXQUFBLEVBQWE7QUFEYixLQURJLENBQU47QUFJQSxJQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQWEsR0FBQSxDQUFiLENBQWEsQ0FBYixFQUFxQixVQUFBLENBQUEsRUFBQTthQUFRLEdBQUEsQ0FBSSxDQUFBLEdBQUwsQ0FBQyxDQUFELEdBQWUsR0FBQSxDQUFJLENBQUEsR0FBTCxDQUFDLEM7QUFBM0MsS0FBQSxDQUFBO0FBQ0EsSUFBQSxNQUFBLENBQUEsR0FBQSxFQUFhLEVBQUEsQ0FBYixDQUFhLENBQWIsRUFBb0IsWUFBQTthQUFHLEM7QUFB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Q0FBQyxDQUFELEtBQVAsRUFBQSxDO0FBMUV5QixHQWtFM0IsQ0FsRTJCLENBQWpCLENBQVo7U0E4RUEsT0FBTyxDQUFQLElBQUEsQ0FBYSxnQkFBQSxDQUFBLEdBQWIsQ0FBQSxDO0FBaEZGLENBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXJ0IGZyb20gXCJhc3NlcnRcIlxuaW1wb3J0IHt0ZXN0LCBwcmludCwgc3VjY2Vzc30gZnJvbSBcImFtZW5cIlxuXG57aXNUeXBlLCBpc0tpbmQsIGlzRnVuY3Rpb24sIGlzU3RyaW5nLCBpc051bWJlcixcbiAgaXNFcXVhbCwgZXEsIGd0ZSwgbHRlfSA9IHJlcXVpcmUgXCJwYW5kYS1wYXJjaG1lbnRcIlxuXG5pbXBvcnQgR2VuZXJpYyBmcm9tIFwiLi4vc3JjXCJcbntjcmVhdGUsIGRlZmluZSwgbG9va3VwfSA9IEdlbmVyaWNcblxuZG8gLT5cblxuICBwcmludCBhd2FpdCB0ZXN0IFwiR2VuZXJpY3NcIiwgW1xuXG4gICAgdGVzdCBcIkZpYm9uYWNjaSBmdW5jdGlvblwiLCBkbyAtPlxuXG4gICAgICBmaWIgPSBjcmVhdGVcbiAgICAgICAgbmFtZTogXCJmaWJcIlxuICAgICAgICBkZXNjcmlwdGlvbjogXCJGaWJvbmFjY2kgc2VxdWVuY2VcIlxuXG4gICAgICBkZWZpbmUgZmliLCAoZ3RlIDEpLCAobikgLT4gKGZpYiBuIC0gMSkgKyAoZmliIG4gLSAyKVxuICAgICAgZGVmaW5lIGZpYiwgKGVxIDEpLCAtPiAxXG4gICAgICBkZWZpbmUgZmliLCAoZXEgMiksIC0+IDFcblxuICAgICAgW1xuXG4gICAgICAgIHRlc3QgXCJtYXRjaGVzIHNpbXBsZSBwcmVkaWNhdGVzXCIsIC0+XG4gICAgICAgICAgYXNzZXJ0IChmaWIgNSkgPT0gNVxuXG4gICAgICAgIHRlc3QgXCJ0aHJvd3Mgd2l0aCBuYW1lL2FyZ3VtZW50cyBvbiB0eXBlIGVycm9yXCIsIC0+XG4gICAgICAgICAgY29uc29sZS53YXJuIFwidGhyb3dzIHRlc3Qgb25seSB3b3JrcyBvbiBub2RlIDEwK1wiXG4gICAgICAgICAgYXNzZXJ0LnRocm93cyAoLT4gZmliIDApLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJmaWI6IEludmFsaWQgYXJndW1lbnRzLlwiXG4gICAgICAgICAgICBhcmd1bWVudHM6IFsgMCBdXG5cbiAgICAgIF1cblxuICAgIHRlc3QgXCJQb2x5bW9ycGhpYyBkaXNwYXRjaFwiLCAtPlxuXG4gICAgICBjbGFzcyBBXG4gICAgICBjbGFzcyBCIGV4dGVuZHMgQVxuXG4gICAgICBhID0gbmV3IEFcbiAgICAgIGIgPSBuZXcgQlxuXG4gICAgICBmb28gPSBjcmVhdGUoKVxuICAgICAgZGVmaW5lIGZvbywgKGlzS2luZCBBKSwgLT4gXCJmb286IEFcIlxuICAgICAgZGVmaW5lIGZvbywgKGlzVHlwZSBCKSwgLT4gXCJmb286IEJcIlxuICAgICAgZGVmaW5lIGZvbywgKGlzS2luZCBBKSwgKGlzS2luZCBCKSwgLT4gXCJmb286IEEgKyBCXCJcbiAgICAgIGRlZmluZSBmb28sIChpc0tpbmQgQiksIChpc0tpbmQgQSksIC0+IFwiZm9vOiBCICsgQVwiXG4gICAgICBkZWZpbmUgZm9vLCAoZXEgYSksIChlcSBiKSwgLT4gXCJmb286IGEgKyBiXCJcblxuICAgICAgYXNzZXJ0IChmb28gYikgPT0gXCJmb286IEJcIlxuICAgICAgYXNzZXJ0IChmb28gYSwgYikgPT0gXCJmb286IGEgKyBiXCJcbiAgICAgIGFzc2VydCAoZm9vIGIsIGEpID09IFwiZm9vOiBCICsgQVwiXG4gICAgICBhc3NlcnQudGhyb3dzIC0+XG4gICAgICAgIGZvbyBiLCBhLCBiXG5cbiAgICB0ZXN0IFwiVmFyaWFkaWMgYXJndW1lbnRzXCIsIC0+XG5cbiAgICAgIGJhciA9IGNyZWF0ZSgpXG4gICAgICBkZWZpbmUgYmFyLCBTdHJpbmcsICgtPiB0cnVlKSwgKHgsIGEuLi4pIC0+IGFbMF1cbiAgICAgIGRlZmluZSBiYXIsIE51bWJlciwgKC0+IHRydWUpLCAoeCwgYS4uLikgLT4geFxuXG4gICAgICBhc3NlcnQgKGJhciBcImZvb1wiLCAxLCAyLCAzKSA9PSAxXG5cbiAgICB0ZXN0IFwiUHJlZGljYXRlIGZ1bmN0aW9uc1wiLCAtPlxuXG4gICAgICBiYXogPSBjcmVhdGUoKVxuICAgICAgZGVmaW5lIGJheiwgKCh4KSAtPiB4ICE9IDcpLCAtPiBmYWxzZVxuICAgICAgZGVmaW5lIGJheiwgKCh4KSAtPiB4ID09IDcpLCAoeCkgLT4gdHJ1ZVxuXG4gICAgICBhc3NlcnQgKGJheiA3KVxuICAgICAgYXNzZXJ0ICEoYmF6IDYpXG5cbiAgICB0ZXN0IFwiR2VuZXJpY3MgYXJlIGZ1bmN0aW9uc1wiLCAtPlxuICAgICAgYXNzZXJ0IGlzRnVuY3Rpb24gY3JlYXRlKClcblxuICAgIHRlc3QgXCJMb29rdXBzXCIsIC0+XG5cbiAgICAgIGZvbyA9IGNyZWF0ZSgpXG5cbiAgICAgIGRlZmluZSBmb28sIGlzTnVtYmVyLCAoeCkgLT4geCArIHhcbiAgICAgIGRlZmluZSBmb28sIGlzU3RyaW5nLCAoeCkgLT4gZmFsc2VcblxuICAgICAgZiA9IGxvb2t1cCBmb28sIFsgNyBdXG4gICAgICBhc3NlcnQgKGYgNykgPT0gMTRcblxuICBdXG5cbiAgcHJvY2Vzcy5leGl0IGlmIHN1Y2Nlc3MgdGhlbiAwIGVsc2UgMVxuIl0sInNvdXJjZVJvb3QiOiIifQ==
//# sourceURL=/Users/dyoder/repos/panda-generics/test/index.coffee
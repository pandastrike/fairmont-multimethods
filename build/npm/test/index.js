"use strict";

var _assert = _interopRequireDefault(require("assert"));

var _amen = require("amen");

var _src = require("../src");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eq, isEqual, isFunction, isKind, isNumber, isString, isType, lte;
({
  isType,
  isKind,
  isFunction,
  isString,
  isNumber,
  isEqual,
  eq,
  lte
} = require("panda-parchment"));

(async function () {
  (0, _amen.print)((await (0, _amen.test)("Multimethods", [(0, _amen.test)("Fibonacci function", function () {
    var fib;
    fib = _src.Method.create({
      description: "Fibonacci sequence",
      default: function () {
        throw new TypeError("Operand must be a postive integer");
      }
    });

    _src.Method.define(fib, isType(Number), function (n) {
      return fib(n - 1) + fib(n - 2);
    });

    _src.Method.define(fib, eq(1), function () {
      return 1;
    });

    _src.Method.define(fib, eq(2), function () {
      return 1;
    });

    return (0, _assert.default)(fib(5) === 5);
  }), (0, _amen.test)("Polymorphic dispatch", function () {
    var A, B, a, b, foo;
    A = class A {};
    B = class B extends A {};
    a = new A();
    b = new B();
    foo = _src.Method.create();

    _src.Method.define(foo, isKind(A), function () {
      return "foo: A";
    });

    _src.Method.define(foo, isType(B), function () {
      return "foo: B";
    });

    _src.Method.define(foo, isKind(A), isKind(B), function () {
      return "foo: A + B";
    });

    _src.Method.define(foo, isKind(B), isKind(A), function () {
      return "foo: B + A";
    });

    _src.Method.define(foo, eq(a), eq(b), function () {
      return "foo: a + b";
    });

    (0, _assert.default)(foo(b) === "foo: B");
    (0, _assert.default)(foo(a, b) === "foo: a + b");
    (0, _assert.default)(foo(b, a) === "foo: B + A");
    return _assert.default.throws(function () {
      return foo(b, a, b);
    });
  }), (0, _amen.test)("Variadic arguments", function () {
    var bar;
    bar = _src.Method.create();

    _src.Method.define(bar, String, function () {
      return true;
    }, function (x, ...a) {
      return a[0];
    });

    _src.Method.define(bar, Number, function () {
      return true;
    }, function (x, ...a) {
      return x;
    });

    return (0, _assert.default)(bar("foo", 1, 2, 3) === 1);
  }), (0, _amen.test)("Predicate functions", function () {
    var baz;
    baz = _src.Method.create();

    _src.Method.define(baz, function (x) {
      return x !== 7;
    }, function () {
      return false;
    });

    _src.Method.define(baz, function (x) {
      return x === 7;
    }, function (x) {
      return true;
    });

    (0, _assert.default)(baz(7));
    return (0, _assert.default)(!baz(6));
  }), (0, _amen.test)("Multimethods are functions", function () {
    return (0, _assert.default)(isFunction(_src.Method.create()));
  }), (0, _amen.test)("Lookups", function () {
    var f, foo;
    foo = _src.Method.create();

    _src.Method.define(foo, isNumber, function (x) {
      return x + x;
    });

    _src.Method.define(foo, isString, function (x) {
      return false;
    });

    f = _src.Method.lookup(foo, [7]);
    return (0, _assert.default)(f(7) === 14);
  })])));
  return process.exit(_amen.success ? 0 : 1);
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9keW9kZXIvcmVwb3MvcGFuZGEtZ2VuZXJpY3MvdGVzdC9pbmRleC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFLQTs7OztBQU5BLElBQUEsRUFBQSxFQUFBLE9BQUEsRUFBQSxVQUFBLEVBQUEsTUFBQSxFQUFBLFFBQUEsRUFBQSxRQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUE7QUFHQSxDQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxNQUFBO0FBQUEsRUFBQSxVQUFBO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxRQUFBO0FBQUEsRUFBQSxPQUFBO0FBQUEsRUFBQSxFQUFBO0FBQUEsRUFBQTtBQUFBLElBQ3NCLE9BQUEsQ0FEdEIsaUJBQ3NCLENBRHRCOztBQUtHLENBQUEsa0JBQUE7QUFDRCxvQkFBTSxNQUFNLGdCQUFBLGNBQUEsRUFBcUIsQ0FDL0IsZ0JBQUEsb0JBQUEsRUFBMkIsWUFBQTtBQUV6QixRQUFBLEdBQUE7QUFBQSxJQUFBLEdBQUEsR0FBTSxZQUFBLE1BQUEsQ0FDSjtBQUFBLE1BQUEsV0FBQSxFQUFBLG9CQUFBO0FBQ0EsTUFBQSxPQUFBLEVBQVMsWUFBQTtBQUFHLGNBQU0sSUFBQSxTQUFBLENBQUEsbUNBQUEsQ0FBTjtBQUFIO0FBRFQsS0FESSxDQUFOOztBQUlBLGdCQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQW9CLE1BQUEsQ0FBcEIsTUFBb0IsQ0FBcEIsRUFBb0MsVUFBQSxDQUFBLEVBQUE7YUFBUSxHQUFBLENBQUksQ0FBQSxHQUFMLENBQUMsQ0FBRCxHQUFlLEdBQUEsQ0FBSSxDQUFBLEdBQUwsQ0FBQyxDO0FBQTFELEtBQUE7O0FBQ0EsZ0JBQUEsTUFBQSxDQUFBLEdBQUEsRUFBb0IsRUFBQSxDQUFwQixDQUFvQixDQUFwQixFQUEyQixZQUFBO2FBQUcsQztBQUE5QixLQUFBOztBQUNBLGdCQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQW9CLEVBQUEsQ0FBcEIsQ0FBb0IsQ0FB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LENBQUEsS0FBSyxDO0FBQWhDLEtBQUEsRUFBb0MsVUFBQSxDQUFBLEVBQUE7YUFBTyxJO0FBQTNDLEtBQUE7O0FBRUEseUJBQVEsR0FBQSxDQUFSLENBQVEsQ0FBUjtXQUNBLHFCQUFPLENBQUUsR0FBQSxDQUFULENBQVMsQ0FBVCxDO0FBakQ2QixHQTBDL0IsQ0ExQytCLEVBbUQvQixnQkFBQSw0QkFBQSxFQUFtQyxZQUFBO1dBQ2pDLHFCQUFPLFVBQUEsQ0FBVyxZQUFsQixNQUFrQixFQUFYLENBQVAsQztBQXBENkIsR0FtRC9CLENBbkQrQixFQXNEL0IsZ0JBQUEsU0FBQSxFQUFnQixZQUFBO0FBRWQsUUFBQSxDQUFBLEVBQUEsR0FBQTtBQUFBLElBQUEsR0FBQSxHQUFNLFlBQUEsTUFBQSxFQUFOOztBQUVBLGdCQUFBLE1BQUEsQ0FBQSxHQUFBLEVBQUEsUUFBQSxFQUE2QixVQUFBLENBQUEsRUFBQTthQUFPLENBQUEsR0FBSSxDO0FBQXhDLEtBQUE7O0FBQ0EsZ0JBQUEsTUFBQSxDQUFBLEdBQUEsRUFBQSxRQUFBLEVBQTZCLFVBQUEsQ0FBQSxFQUFBO2FBQU8sSztBQUFwQyxLQUFBOztBQUVBLElBQUEsQ0FBQSxHQUFJLFlBQUEsTUFBQSxDQUFBLEdBQUEsRUFBbUIsQ0FBbkIsQ0FBbUIsQ0FBbkIsQ0FBSjtXQUNBLHFCQUFRLENBQUEsQ0FBRCxDQUFDLENBQUQsS0FBUCxFQUFBLEM7QUE5RDZCLEdBc0QvQixDQXREK0IsQ0FBckIsQ0FBWjtTQWtFQSxPQUFPLENBQVAsSUFBQSxDQUFhLGdCQUFBLENBQUEsR0FBYixDQUFBLEM7QUFuRUYsQ0FBRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NlcnQgZnJvbSBcImFzc2VydFwiXG5pbXBvcnQge3Rlc3QsIHByaW50LCBzdWNjZXNzfSBmcm9tIFwiYW1lblwiXG5cbntpc1R5cGUsIGlzS2luZCwgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGlzTnVtYmVyLFxuICBpc0VxdWFsLCBlcSwgbHRlfSA9IHJlcXVpcmUgXCJwYW5kYS1wYXJjaG1lbnRcIlxuXG5pbXBvcnQge01ldGhvZH0gZnJvbSBcIi4uL3NyY1wiXG5cbmRvIC0+XG4gIHByaW50IGF3YWl0IHRlc3QgXCJNdWx0aW1ldGhvZHNcIiwgW1xuICAgIHRlc3QgXCJGaWJvbmFjY2kgZnVuY3Rpb25cIiwgLT5cblxuICAgICAgZmliID0gTWV0aG9kLmNyZWF0ZVxuICAgICAgICBkZXNjcmlwdGlvbjogXCJGaWJvbmFjY2kgc2VxdWVuY2VcIlxuICAgICAgICBkZWZhdWx0OiAtPiB0aHJvdyBuZXcgVHlwZUVycm9yIFwiT3BlcmFuZCBtdXN0IGJlIGEgcG9zdGl2ZSBpbnRlZ2VyXCJcblxuICAgICAgTWV0aG9kLmRlZmluZSBmaWIsIChpc1R5cGUgTnVtYmVyKSwgKG4pIC0+IChmaWIgbiAtIDEpICsgKGZpYiBuIC0gMilcbiAgICAgIE1ldGhvZC5kZWZpbmUgZmliLCAoZXEgMSksIC0+IDFcbiAgICAgIE1ldGhvZC5kZWZpbmUgZmliLCAoZXEgMiksIC0+IDFcblxuICAgICAgYXNzZXJ0IChmaWIgNSkgPT0gNVxuXG4gICAgdGVzdCBcIlBvbHltb3JwaGljIGRpc3BhdGNoXCIsIC0+XG5cbiAgICAgIGNsYXNzIEFcbiAgICAgIGNsYXNzIEIgZXh0ZW5kcyBBXG5cbiAgICAgIGEgPSBuZXcgQVxuICAgICAgYiA9IG5ldyBCXG5cbiAgICAgIGZvbyA9IE1ldGhvZC5jcmVhdGUoKVxuICAgICAgTWV0aG9kLmRlZmluZSBmb28sIChpc0tpbmQgQSksIC0+IFwiZm9vOiBBXCJcbiAgICAgIE1ldGhvZC5kZWZpbmUgZm9vLCAoaXNUeXBlIEIpLCAtPiBcImZvbzogQlwiXG4gICAgICBNZXRob2QuZGVmaW5lIGZvbywgKGlzS2luZCBBKSwgKGlzS2luZCBCKSwgLT4gXCJmb286IEEgKyBCXCJcbiAgICAgIE1ldGhvZC5kZWZpbmUgZm9vLCAoaXNLaW5kIEIpLCAoaXNLaW5kIEEpLCAtPiBcImZvbzogQiArIEFcIlxuICAgICAgTWV0aG9kLmRlZmluZSBmb28sIChlcSBhKSwgKGVxIGIpLCAtPiBcImZvbzogYSArIGJcIlxuXG4gICAgICBhc3NlcnQgKGZvbyBiKSA9PSBcImZvbzogQlwiXG4gICAgICBhc3NlcnQgKGZvbyBhLCBiKSA9PSBcImZvbzogYSArIGJcIlxuICAgICAgYXNzZXJ0IChmb28gYiwgYSkgPT0gXCJmb286IEIgKyBBXCJcbiAgICAgIGFzc2VydC50aHJvd3MgLT5cbiAgICAgICAgZm9vIGIsIGEsIGJcblxuICAgIHRlc3QgXCJWYXJpYWRpYyBhcmd1bWVudHNcIiwgLT5cblxuICAgICAgYmFyID0gTWV0aG9kLmNyZWF0ZSgpXG4gICAgICBNZXRob2QuZGVmaW5lIGJhciwgU3RyaW5nLCAoLT4gdHJ1ZSksICh4LCBhLi4uKSAtPiBhWzBdXG4gICAgICBNZXRob2QuZGVmaW5lIGJhciwgTnVtYmVyLCAoLT4gdHJ1ZSksICh4LCBhLi4uKSAtPiB4XG5cbiAgICAgIGFzc2VydCAoYmFyIFwiZm9vXCIsIDEsIDIsIDMpID09IDFcblxuICAgIHRlc3QgXCJQcmVkaWNhdGUgZnVuY3Rpb25zXCIsIC0+XG5cbiAgICAgIGJheiA9IE1ldGhvZC5jcmVhdGUoKVxuICAgICAgTWV0aG9kLmRlZmluZSBiYXosICgoeCkgLT4geCAhPSA3KSwgLT4gZmFsc2VcbiAgICAgIE1ldGhvZC5kZWZpbmUgYmF6LCAoKHgpIC0+IHggPT0gNyksICh4KSAtPiB0cnVlXG5cbiAgICAgIGFzc2VydCAoYmF6IDcpXG4gICAgICBhc3NlcnQgIShiYXogNilcblxuICAgIHRlc3QgXCJNdWx0aW1ldGhvZHMgYXJlIGZ1bmN0aW9uc1wiLCAtPlxuICAgICAgYXNzZXJ0IGlzRnVuY3Rpb24gTWV0aG9kLmNyZWF0ZSgpXG5cbiAgICB0ZXN0IFwiTG9va3Vwc1wiLCAtPlxuXG4gICAgICBmb28gPSBNZXRob2QuY3JlYXRlKClcblxuICAgICAgTWV0aG9kLmRlZmluZSBmb28sIGlzTnVtYmVyLCAoeCkgLT4geCArIHhcbiAgICAgIE1ldGhvZC5kZWZpbmUgZm9vLCBpc1N0cmluZywgKHgpIC0+IGZhbHNlXG5cbiAgICAgIGYgPSBNZXRob2QubG9va3VwIGZvbywgWyA3IF1cbiAgICAgIGFzc2VydCAoZiA3KSA9PSAxNFxuXG4gIF1cblxuICBwcm9jZXNzLmV4aXQgaWYgc3VjY2VzcyB0aGVuIDAgZWxzZSAxXG4iXSwic291cmNlUm9vdCI6IiJ9
//# sourceURL=/Users/dyoder/repos/panda-generics/test/index.coffee